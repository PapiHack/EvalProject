package generator;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;

public class ClassGenerator 
{
	private ArrayList<ClassSpecification> classes;
	
	public ClassGenerator() {}
	
	public ClassGenerator(ArrayList<ClassSpecification> classes) 
	{
		this.setClasses(classes);
	}
	
	public ArrayList<ClassSpecification> getClasses()
	{
		return this.classes;
	}
	
	public void setClasses(ArrayList<ClassSpecification> classes) 
	{
		this.classes = classes;
	}
	
	public void generate() throws Exception
	{
		System.out.println("Génération des classes...");
	
		File file;
		BufferedWriter bufferWriter;
		int nbClasses = this.classes.size();
		for(int i = 0; i < nbClasses; i++) 
		{
			ClassSpecification currentClass = this.classes.get(i);
			String className = ("" + currentClass.getName().charAt(0)).toUpperCase() + currentClass.getName().substring(1, currentClass.getName().length());
			file = new File("src/generated/" + className + ".java");
			bufferWriter = new BufferedWriter(new FileWriter(file));
			bufferWriter.write("package generated;");
			bufferWriter.newLine();
			bufferWriter.newLine();
			bufferWriter.write("import java.util.ArrayList;");
			bufferWriter.newLine();
			bufferWriter.newLine();
			bufferWriter.write("/*------------ GENERATED BY Meïssa & Kanouté ------------*/");
			bufferWriter.newLine();
			bufferWriter.newLine();
			if(currentClass.isRoot()) 
			{
				bufferWriter.newLine();
				bufferWriter.write("import source.XMLTools;");
				bufferWriter.newLine();
			}
			bufferWriter.newLine();
			bufferWriter.write("public class " + className);
			bufferWriter.newLine();
			bufferWriter.write("{");
			bufferWriter.newLine();
			//generate methods here !
			this.writeClassAttributes(currentClass, bufferWriter);
			this.generateGetters(currentClass, bufferWriter);
			this.generateSetters(currentClass, bufferWriter);
			if(currentClass.isRoot())
				this.generateSaveMethod(currentClass, bufferWriter);
			bufferWriter.newLine();
			bufferWriter.write("}");
			bufferWriter.newLine();
			bufferWriter.flush();
		}
		System.out.println("Génération terminée ! Veuillez rafraîchir le package \"generated\" !");
	}
	
	public void writeClassAttributes(ClassSpecification klass, BufferedWriter bw) throws Exception
	{
		int nbAttributes = klass.getAttributes().size();
		for(int i = 0; i < nbAttributes; i++) 
		{
			FieldSpecification currentField = klass.getAttributes().get(i);
			bw.write("\t private " + currentField.getType() + " "  + currentField.getName() + ";");
			bw.newLine();
		}
		bw.newLine();
	}
	
	public void generateGetters(ClassSpecification klass, BufferedWriter bw) throws Exception
	{
		int nbAttributes = klass.getAttributes().size();
		for(int i = 0; i < nbAttributes; i++) 
		{
			FieldSpecification currentField = klass.getAttributes().get(i);
			String currentFieldName = ("" + currentField.getName().charAt(0)).toUpperCase() + currentField.getName().substring(1, currentField.getName().length());
			bw.write("\t public " + currentField.getType() + " get" + currentFieldName + "()");
			bw.newLine();
			bw.write("\t {");
			bw.newLine();
			bw.write("\t \t return this." + currentField.getName() + ";");
			bw.newLine();
			bw.write("\t }");
			bw.newLine();
			bw.newLine();
		}
	}
	
	public void generateSetters(ClassSpecification klass, BufferedWriter bw) throws Exception
	{
		int nbAttributes = klass.getAttributes().size();
		for(int i = 0; i < nbAttributes; i++) 
		{
			FieldSpecification currentField = klass.getAttributes().get(i);
			String currentFieldName = ("" + currentField.getName().charAt(0)).toUpperCase() + currentField.getName().substring(1, currentField.getName().length());
			bw.write("\t public void set" + currentFieldName + "(" + currentField.getType() + " " + currentField.getName() + ")");
			bw.newLine();
			bw.write("\t {");
			bw.newLine();
			bw.write("\t \t this." + currentField.getName() + " = " + currentField.getName() + ";");
			bw.newLine();
			bw.write("\t }");
			bw.newLine();
			bw.newLine();
		}
	}
	
	public void generateSaveMethod(ClassSpecification klass, BufferedWriter bw) throws Exception
	{
		bw.write("\t public void save() throws Exception");
		bw.newLine();
		bw.write("\t {");
		bw.newLine();
		bw.newLine();
		bw.write("\t \t System.out.println(\"Génération de l'instance XML...\");");
		bw.newLine();
		bw.newLine();
		bw.write("\t \t XMLTools xml = new XMLTools(\""+ klass.getName() +"\");");
		bw.newLine();
		bw.newLine();
		
		for(int i = 0; i < klass.getAttributes().size(); i++) 
		{
			String classChild = ("" + klass.getAttributes().get(i).getName().charAt(0)).toUpperCase() + klass.getAttributes().get(i).getName().substring(1, klass.getAttributes().get(i).getName().length());
			String child = klass.getAttributes().get(i).getName();
			bw.write("\t \t for(" + classChild + " " + child + " : " + "this." + child + ")");
			bw.newLine();
			bw.write("\t \t {");
			bw.newLine();
			bw.write("\t \t \t xml.setElementToRootElement(\"" + child + "\");");
			bw.newLine();
			ClassSpecification cls = this.getSpecificClass(child);
			int nbChild = cls.getAttributes().size();
			for(int j = 0; j < nbChild; j++) 
			{
				String attr = cls.getAttributes().get(j).getName();
				if(cls.getAttributes().get(j).getType().contains("ArrayList")) 
				{
					bw.write("\t \t \t xml.setElementToElement(\"" + child + "\"" + ", " + "\"" + attr + "\");" );
					bw.newLine();
					bw.newLine();
					String attrMaj = ("" + attr.charAt(0)).toUpperCase().concat(attr.substring(1, attr.length()));
					bw.write("\t \t \t for(" + attrMaj + " " + attr + " : " + child + ".get" + attrMaj + "()" + ")");
					bw.newLine();
					bw.write("\t \t \t {");
					bw.newLine();
					String attrWithoutS = attr.substring(0, attr.length() - 1);
					String attrWithoutSMaj = ("" + attrWithoutS.charAt(0)).toUpperCase().concat(attrWithoutS.substring(1, attrWithoutS.length()));
					bw.write("\t \t \t \t xml.setElementToElement(\"" + attr + "\"" + ", " +  "\"" + attrWithoutS + "\"" +  ", " + attr + ".get" + attrWithoutSMaj + "()" +  ");");
					bw.newLine();
					bw.write("\t \t \t }");
					bw.newLine();
					bw.newLine();
				}
				else 
				{
					bw.write("\t \t \t xml.setElementToElement(\"" + child + "\"" + ", " + "\"" + attr + "\"" + ", " + child + ".get" + ("" + attr.charAt(0)).toUpperCase() + attr.substring(1, attr.length()) + "());");
					bw.newLine();
				}
			}
			bw.write("\t \t }");
			bw.newLine();
			bw.newLine();
			
		}
		
		bw.write("\t \t xml.createXML(\"" + klass.getName() + "\");");
		bw.newLine();
		bw.newLine();
		bw.write("\t \t System.out.println(\"Instance XML générée !\");");
		bw.newLine();
		bw.newLine();
		bw.write("\t \t System.out.println(\"Rafraîchir le dossier \\\"resources/generated/\\\" ! \");");
		bw.newLine();
		bw.newLine();
		bw.write("\t }");
	}
	
	public ClassSpecification getSpecificClass(String cls) 
	{
		ClassSpecification klass = new ClassSpecification();
		for(int i = 0; i < this.classes.size(); i++) 
		{
			if(this.classes.get(i).getName().equalsIgnoreCase(cls)) 
			{
				klass = this.classes.get(i);
				break;
			}
		}
		return klass;
	}
}
